datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

model Customer {
  id      Int       @id @default(autoincrement())
  name    String
  role    String    @default("customer")
  type    String    @default("individual")
  Task    Task[]
  Mission Mission[]
  Client  Client[]
}

model Site {
  id             Int     @id @default(autoincrement())
  name           String
  type           String
  commercial     String
  active         Boolean @default(false)
  contact        String
  siret          String
  mail           String
  phone          String
  billingAddress String
  typeofPass     String
  tasks          Task[]
}

model Container {
  id      Int    @id @default(autoincrement())
  name    String
  barcode String
  type    String
  tasks   Task[]
}

model Material {
  id    Int    @id @default(autoincrement())
  name  String
  tasks Task[]
}

model Service {
  id    Int    @id @default(autoincrement())
  name  String
  tasks Task[]
}

model Worker {
  id      Int       @id @default(autoincrement())
  name    String
  tasks   Task[]
  Mission Mission[]
}

model Equipement {
  id     Int    @id @default(autoincrement())
  name   String
  status String
  //tasks Task[]
}

model Invoce {
  id         Int       @id @default(autoincrement())
  invoiceId  String
  reference  String
  period     String
  date       String
  client     String
  site       String
  canceled   Boolean   @default(false)
  paid       String
  amountHT   Float
  amountTTC  Float
  collectHT  String
  treatHT    String
  cleanHT    String
  otherHT    String
  otherLines String
  Mission    Mission[]
  Client     Client[]
}

model Uploader {
  id        Int    @id @default(autoincrement())
  fileName  String
  fileUrl   String
  fileType  String
  createdAt String
}

model Task {
  id          Int       @id @default(autoincrement())
  plannedAt   DateTime  @default(now())
  worker      Worker    @relation(fields: [workerId], references: [id])
  workerId    Int
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  Int
  site        Site      @relation(fields: [siteId], references: [id])
  siteId      Int
  container   Container @relation(fields: [containerId], references: [id])
  containerId Int
  material    Material  @relation(fields: [materialId], references: [id])
  materialId  Int
  service     Service   @relation(fields: [serviceId], references: [id])
  serviceId   Int
  start       DateTime  @default(now())
  end         DateTime  @default(now())
  title       String
}

model User {
  id                  Int       @id @default(autoincrement())
  email               String    @unique
  hashedPassword      String // <─┐
  salt                String //  ┤
  resetToken          String? // <─┤
  resetTokenExpiresAt DateTime? //    ┤
  userId              Int //   <─┘
}

model Mission {
  id         Int      @id @default(autoincrement())
  status     String   @default("")
  start      DateTime @default(now())
  end        DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  Worker     Worker?  @relation(fields: [workerId], references: [id])
  workerId   Int?
  invoce     Invoce?  @relation(fields: [invoceId], references: [id])
  invoceId   Int?
  Client     Client[]
}

model Client {
  id         Int      @id @default(autoincrement())
  name       String   @default("")
  mission    Mission  @relation(fields: [missionId], references: [id])
  missionId  Int
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  invoce     Invoce   @relation(fields: [invoceId], references: [id])
  invoceId   Int
  checked    Boolean  @default(false)
}
